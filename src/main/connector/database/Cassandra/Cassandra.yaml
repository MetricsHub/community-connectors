
extends:
  - ../../semconv/Database

connector:
  displayName: Apache Cassandra
  platforms:
  - Cassandra
  reliesOn: Apache Cassandra 3.0 or higher
  information: Monitors performance, operational metrics, and cluster health for Cassandra databases through Java Management Extensions (JMX)
  detection:
    appliesTo:
    - linux
    - nt
    tags:
    - database
    - linux
    - windows
    criteria:
    - type: jmx
      objectName: org.apache.cassandra.metrics:type=Storage,name=Load
      attributes:
      - Count
      expectedResult: ^[0-9]

metrics:
  db.server.cassandra.hints:
    description: Total number of hints stored on the node.
    type: Counter
    unit: "{hint}"

  db.server.cassandra.nodes:
    description: The number of nodes in the Cassandra cluster, categorized by their state.
    type: Gauge
    unit: "{node}"

beforeAll:
  # ServerName for the Cassandra instance
  dbServerName:
    type: jmx
    # The name of the Cassandra server, typically the hostname or IP address.
    objectName: java.lang:type=Runtime
    attributes:
    - Name
    computes:
    - type: awk
      script: |
        BEGIN {
            FS = "@"
        }

        {
            if (NF == 2 && $1 ~ /^[0-9]+$/) {
                print $2
            } else {
                print ""
            }
        }

  # Cluster name for the Cassandra instance
  # ClusterName;
  dbClusterName:
    type: jmx
    # The name of the Cassandra cluster
    objectName: org.apache.cassandra.db:type=StorageService
    attributes:
    - ClusterName

  # Release version of the Cassandra instance
  # ReleaseVersion;
  dbReleaseVersion:
    type: jmx
    # The version of the Cassandra instance
    objectName: org.apache.cassandra.db:type=StorageService
    attributes:
    - ReleaseVersion

monitors:
  cassandra:
    keys: [ db.system ]
    simple:
      sources:
        # Storage metrics $1
        totalHints:
          type: jmx
          # Number of hint messages written to this node since [re]start.
          objectName: org.apache.cassandra.metrics:type=Storage,name=TotalHints
          attributes:
          - Count

        # $2
        storageLoad:
          type: jmx
          # Size, in bytes, of the on disk data size this node manages.
          objectName: org.apache.cassandra.metrics:type=Storage,name=Load
          attributes:
          - Count

        # Read/Write latency Bean to get the number of read and write operations
        # $3
        readLatency:
          type: jmx
          # Latency of read operations, Count is the number of read operations
          objectName: org.apache.cassandra.metrics:type=ClientRequest,scope=Read,name=Latency
          attributes:
          - Count

        # $4
        writeLatency:
          type: jmx
          # Latency of write operations, Count is the number of write operations
          objectName: org.apache.cassandra.metrics:type=ClientRequest,scope=Write,name=Latency
          attributes:
          - Count

        # Table metrics $5
        tableBytesFlushed:
          type: jmx
          # Total number of bytes flushed since server [re]start.
          objectName: org.apache.cassandra.metrics:type=Table,name=BytesFlushed
          attributes:
          - Value

        # Compaction metrics $6
        pendingTasks:
          type: jmx
          # Estimated number of compactions remaining to perform
          objectName: org.apache.cassandra.metrics:type=Compaction,name=PendingTasks
          attributes:
          - Value

        # Memory metrics $7
        memtableOnHeapSize:
          type: jmx
          # Total amount of data stored in the memtable that resides on-heap, including
          # column related overhead and partitions overwritten.
          objectName: org.apache.cassandra.metrics:type=Table,name=MemtableOnHeapSize
          attributes:
          - Value

        # Memory metrics $8
        memtableOffHeapSize:
          type: jmx
          # Total amount of data stored in the memtable that resides off-heap, including
          # column related overhead and partitions overwritten.
          objectName: org.apache.cassandra.metrics:type=Table,name=MemtableOffHeapSize
          attributes:
          - Value

        # Timeout and error metrics $9
        readTimeouts:
          type: jmx
          # Number of Read timeouts encountered.
          objectName: org.apache.cassandra.metrics:type=ClientRequest,scope=Read,name=Timeouts
          attributes:
          - Count

        # $10
        writeTimeouts:
          type: jmx
          # Number of Write timeouts encountered.
          objectName: org.apache.cassandra.metrics:type=ClientRequest,scope=Write,name=Timeouts
          attributes:
          - Count

        # $11
        readUnavailable:
          type: jmx
          # Number of unavailable exceptions encountered for Read requests.
          objectName: org.apache.cassandra.metrics:type=ClientRequest,scope=Read,name=Unavailables
          attributes:
          - Count

        # $12
        writeUnavailable:
          type: jmx
          # Number of unavailable exceptions encountered for Write requests.
          objectName: org.apache.cassandra.metrics:type=ClientRequest,scope=Write,name=Unavailables
          attributes:
          - Count

        # System uptime $13
        uptime:
          type: jmx
          # Uptime of the Cassandra instance in milliseconds.
          objectName: java.lang:type=Runtime
          attributes:
          - Uptime
          computes:
          - type: divide
            column: 1
            value: 1000

        # Connection metrics $14
        connectedNativeClients:
          type: jmx
          # Number of clients connected to this nodes native protocol server
          objectName: org.apache.cassandra.metrics:type=Client,name=connectedNativeClients
          attributes:
          - Value

        # Combine all metrics into a single source table
        # Then transpose the table to have a single row with all metrics
        dbMetrics:
          type: tableUnion
          tables:
            - ${source::totalHints}
            - ${source::storageLoad}
            - ${source::readLatency}
            - ${source::writeLatency}
            - ${source::tableBytesFlushed}
            - ${source::pendingTasks}
            - ${source::memtableOnHeapSize}
            - ${source::memtableOffHeapSize}
            - ${source::readTimeouts}
            - ${source::writeTimeouts}
            - ${source::readUnavailable}
            - ${source::writeUnavailable}
            - ${source::uptime}
            - ${source::connectedNativeClients}
          computes:
            - type: awk
              script: |
                {
                    gsub(/^[ \t]+|[ \t]+$/, "", $0)
                    printf "%s", $0
                }
      mapping:
        source: ${source::dbMetrics}
        attributes:
          db.system: cassandra
          db.server.name: ${source::beforeAll.dbServerName}
          db.version: ${source::beforeAll.dbReleaseVersion}
          db.cluster.name: ${source::beforeAll.dbClusterName}
        metrics:
          # Storage and hints
          db.server.cassandra.hints: $1
          db.server.storage.size: $2
          
          # Read metrics
          db.server.operations{db.io.direction="read"}: $3
          
          # Write metrics
          db.server.operations{db.io.direction="write"}: $4
          
          # Storage I/O
          db.server.storage.io{db.io.direction="write"}: $5
          db.server.pending_operations{db.operation.type="compaction"}: $6
          db.server.cache.usage{db.cache.state="on_heap", db.cassandra.cache.type="memtable"}: $7
          db.server.cache.usage{db.cache.state="off_heap", db.cassandra.cache.type="memtable"}: $8
          
          # Error metrics
          db.server.errors{error.type="read_timeout"}: $9
          db.server.errors{error.type="write_timeout"}: $10
          db.server.errors{error.type="read_unavailable"}: $11
          db.server.errors{error.type="write_unavailable"}: $12
          
          # DB Server uptime and connections
          db.server.uptime: $13
          db.server.current_connections: $14

  cache:
    keys: [ db.cassandra.cache.type ]
    simple:
      sources:
        # Cashe size
        # scope;Size
        cacheSize:
          type: jmx
          # Size of the cache, in bytes, for a specific scope (e.g., KeyCache, RowCache, CounterCache etc.)
          objectName: org.apache.cassandra.metrics:type=Cache,scope=*,name=Capacity
          attributes:
          - Value
          keyProperties:
          - scope

        # Cache Hits
        # scope;Hits
        cacheHits:
          type: jmx
          # Total number of cache hits for the specific scope (e.g., KeyCache, RowCache, CounterCache etc.)
          objectName: org.apache.cassandra.metrics:type=Cache,scope=*,name=Hits
          attributes:
          - Count
          keyProperties:
          - scope

        # Cache Misses
        # scope;Misses
        cacheMisses:
          type: jmx
          # Total number of cache misses for the specific scope (e.g., KeyCache, RowCache, CounterCache etc.)
          objectName: org.apache.cassandra.metrics:type=Cache,scope=*,name=Misses
          attributes:
          - Count
          keyProperties:
          - scope

        # Cache Requests
        # scope;Requests
        cacheRequests:
          type: jmx
          # Total number of cache requests for the specific scope (e.g., KeyCache, RowCache, CounterCache etc.)
          objectName: org.apache.cassandra.metrics:type=Cache,scope=*,name=Requests
          attributes:
          - Count
          keyProperties:
          - scope

        # Cache Size and Hits
        # scope;Size;scope;Hits
        table1:
          type: tableJoin
          leftTable: ${source::cacheSize}
          rightTable: ${source::cacheHits}
          leftKeyColumn: 1
          rightKeyColumn: 1

        # Cache Size, Hits and Misses
        # scope;Size;scope;Hits;scope;Misses
        table2:
          type: tableJoin
          leftTable: ${source::table1}
          rightTable: ${source::cacheMisses}
          leftKeyColumn: 1
          rightKeyColumn: 1
  
        # Cache Size, Hits, Misses and Requests
        # scope;Size;scope;Hits;scope;Misses;scope;Requests
        # Then after computation, we will have:
        # scope;Size;Hits;Misses;Requests
        cacheMetrics:
          type: tableJoin
          leftTable: ${source::table2}
          rightTable: ${source::cacheRequests}
          leftKeyColumn: 1
          rightKeyColumn: 1
          # Optimization to reduce the number of columns
          computes:
          - type: keepColumns
            columnNumbers: 1,2,4,6,8
  
      mapping:
        # Mapping for cache metrics
        # scope;Size;Hits;Misses;Requests
        source: ${source::cacheMetrics}
        attributes:
          db.system: cassandra
          db.cassandra.cache.type: $1
          db.server.name: ${source::beforeAll.dbServerName}
          db.version: ${source::beforeAll.dbReleaseVersion}
          db.cluster.name: ${source::beforeAll.dbClusterName}
        metrics:
          db.server.cache.size: $2
          db.server.cache.operations{db.cache.state="hit"}: $3
          db.server.cache.operations{db.cache.state="miss"}: $4
          db.server.cache.requests: $5

  thread:
    keys: [ db.cassandra.thread.role ]
    # Thread pool metrics
    simple:
      sources:
        # scope;path;PendingTasks
        pendingTasks:
          type: jmx
          # Number of queued tasks queued up on this pool.
          objectName: org.apache.cassandra.metrics:type=ThreadPools,scope=*,path=request,name=PendingTasks
          attributes:
          - Value
          keyProperties:
          - scope
          - path
        # scope;path;ActiveTasks
        activeTasks:
          type: jmx
          # Number of tasks being actively worked on by this pool.
          objectName: org.apache.cassandra.metrics:type=ThreadPools,scope=*,path=request,name=ActiveTasks
          attributes:
          - Value
          keyProperties:
          - scope
          - path
        # scope;path;CurrentlyBlockedTasks
        currentlyBlockedTasks:
          type: jmx
          # Number of tasks that are currently blocked due to queue saturation but on retry will become unblocked.
          objectName: org.apache.cassandra.metrics:type=ThreadPools,scope=*,path=request,name=CurrentlyBlockedTasks
          attributes:
          - Count
          keyProperties:
          - scope
          - path
        # scope;path;PendingTasks;scope;path;ActiveTasks
        table1:
          type: tableJoin
          leftTable: ${source::pendingTasks}
          rightTable: ${source::activeTasks}
          leftKeyColumn: 1
          rightKeyColumn: 1
        # scope;path;PendingTasks;scope;path;ActiveTasks;scope;path;CurrentlyBlockedTasks
        # Then after computation, we will have:
        # scope;path;PendingTasks;ActiveTasks;CurrentlyBlockedTasks
        threadMetrics:
          type: tableJoin
          leftTable: ${source::table1}
          rightTable: ${source::currentlyBlockedTasks}
          leftKeyColumn: 1
          rightKeyColumn: 1
          # Optimization to reduce the number of columns
          computes:
          - type: keepColumns
            columnNumbers: 1,2,3,6,9
      mapping:
        # Mapping for thread metrics
        # scope;path;PendingTasks;ActiveTasks;CurrentlyBlockedTasks
        source: ${source::threadMetrics}
        attributes:
          db.system: cassandra
          db.cassandra.thread.role: $1
          db.thread.pool: $2
          db.server.name: ${source::beforeAll.dbServerName}
          db.version: ${source::beforeAll.dbReleaseVersion}
          db.cluster.name: ${source::beforeAll.dbClusterName}
        metrics:
          db.server.threads{db.thread.state="pending"}: $3
          db.server.threads{db.thread.state="active"}: $4
          db.server.threads{db.thread.state="blocked"}: $5

  # Additional monitor for cluster-level metrics
  cassandra_cluster:
    keys: [ db.system ]
    simple:
      sources:
        clusterNodes:
          type: jmx
          # Cluster information including live, unreachable, joining, leaving, and moving nodes
          # Output format: LiveNodes;UnreachableNodes;JoiningNodes;LeavingNodes;MovingNodes
          # Example: [172.17.0.6, host1, host2];[host3];[host4, host5];[host6];[]
          objectName: "org.apache.cassandra.db:type=StorageService"
          attributes:
            - LiveNodes
            - UnreachableNodes
            - JoiningNodes
            - LeavingNodes
            - MovingNodes
          # Compute the number of nodes in each state
          computes:
            - type: awk
              script: "${file::nodes.awk}"

      mapping:
        source: ${source::clusterNodes}
        attributes:
          db.system: cassandra
          db.server.name: ${source::beforeAll.dbServerName}
          db.version: ${source::beforeAll.dbReleaseVersion}
          db.cluster.name: ${source::beforeAll.dbClusterName}
        metrics:
          db.server.cassandra.nodes{db.node.state="live"}: $1
          db.server.cassandra.nodes{db.node.state="unreachable"}: $2
          db.server.cassandra.nodes{db.node.state="joining"}: $3
          db.server.cassandra.nodes{db.node.state="leaving"}: $4
          db.server.cassandra.nodes{db.node.state="moving"}: $5
