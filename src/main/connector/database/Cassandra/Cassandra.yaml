
extends:
  - ../../semconv/Database

connector:
  displayName: Apache Cassandra
  platforms:
    - Cassandra
  reliesOn: JDK, Apache Cassandra 3.0 or higher
  information: >
    This connector uses Java Management Extensions (JMX) to discover and monitor
    MBeans exposed by Apache Cassandra. It connects remotely (or locally via
    JMX RMI) to fetch MBean attributes and expose them as hardware or application metrics.
    Monitors performance, operational metrics, and cluster health for Cassandra databases.
  detection:
    connectionTypes:
      - remote
      - local
    appliesTo:
      - linux
      - nt
    tags:
      - database
      - linux
      - windows
    criteria:
      - type: jmx
        objectName: "org.apache.cassandra.metrics:type=Storage,name=Load"
        attributes:
          - Count
        expectedResult: ^[0-9]
metrics:
  db.server.cassandra.hints:
    description: Total number of hints stored on the node.
    type: Counter
    unit: "{hint}"
  
  # Once this metric name is confirmed, its definition goes in database.yaml
  db.server.garbage_collector.time:
    description: Total time spent in garbage collection.
    type: Counter
    unit: s

  db.server.cassandra.cluster.nodes:
    description: the number of cassandra  nodes per status (Live, Unreachable, Joining, Leaving, Moving)
    type: Counter
    unit: "{node}"


monitors:
  cassandra:
    simple:
      sources:
        # Storage metrics $1
        totalHintsSource:
          type: jmx
          objectName: "org.apache.cassandra.metrics:type=Storage,name=TotalHints"
          attributes:
            - "Count"
          keyProperties: []
        
        #$2
        storageLoadSource:
          type: jmx
          objectName: "org.apache.cassandra.metrics:type=Storage,name=Load"
          attributes:
            - "Count"
          keyProperties: []

        # Read/Write latency metrics #$3$4$5
        readLatencySource:
          type: jmx
          objectName: "org.apache.cassandra.metrics:type=ClientRequest,scope=Read,name=Latency"
          attributes:
            - "FifteenMinuteRate"
            - "MeanRate"
            - "Count"
          keyProperties: []

        #$6$7
        writeLatencySource:
          type: jmx
          objectName: "org.apache.cassandra.metrics:type=ClientRequest,scope=Write,name=Latency"
          attributes:
            - "MeanRate"
            - "Count"
          keyProperties: []

        # Table metrics $8
        tableBytesFlushedSource:
          type: jmx
          objectName: "org.apache.cassandra.metrics:type=Table,name=BytesFlushed"
          attributes:
            - "Value"
          keyProperties: []

        # Compaction metrics $9
        pendingCompactionsSource:
          type: jmx
          objectName: "org.apache.cassandra.metrics:type=Compaction,name=PendingTasks"
          attributes:
            - "Value"
          keyProperties: []

        # Memory metrics $10
        memtableSizeSource:
          type: jmx
          objectName: "org.apache.cassandra.metrics:type=Table,name=MemtableOnHeapSize"
          attributes:
            - "Value"
          keyProperties: []

        # Cache metrics $11
        keyCacheHitRateSource:
          type: jmx
          objectName: "org.apache.cassandra.metrics:type=Cache,scope=KeyCache,name=HitRate"
          attributes:
            - "Value"
          keyProperties: []

        # GC metrics $12
        gcTimeSource:
          type: jmx
          objectName: "java.lang:type=GarbageCollector,name=G1 Young Generation"
          attributes:
            - "CollectionTime"
          keyProperties: []
          computes:
          - type: divide
            column: 1
            value: 1000

        # Timeout and error metrics $13
        readTimeoutsSource:
          type: jmx
          objectName: "org.apache.cassandra.metrics:type=ClientRequest,scope=Read,name=Timeouts"
          attributes:
            - "Count"
          keyProperties: []

        #$14
        writeTimeoutsSource:
          type: jmx
          objectName: "org.apache.cassandra.metrics:type=ClientRequest,scope=Write,name=Timeouts"
          attributes:
            - "Count"
          keyProperties: []

        readUnavailableSource:
          type: jmx
          objectName: "org.apache.cassandra.metrics:type=ClientRequest,scope=Read,name=Unavailables"
          attributes:
            - "Count"
          keyProperties: []

        #$15
        writeUnavailableSource:
          type: jmx
          objectName: "org.apache.cassandra.metrics:type=ClientRequest,scope=Write,name=Unavailables"
          attributes:
            - "Count"
          keyProperties: []

        # System uptime $16
        uptimeSource:
          type: jmx
          objectName: "java.lang:type=Runtime"
          attributes:
            - "Uptime"
          keyProperties: []
          computes:
          - type: divide
            column: 1
            value: 1000

        # Connection metrics $17
        nativeConnectionsSource:
          type: jmx
          objectName: "org.apache.cassandra.metrics:type=Client,name=connectedNativeClients"
          attributes:
            - "Value"
          keyProperties: []

        # ServerName for the Cassandra instance $18
        dbServerName:
          type: jmx
          objectName: "java.lang:type=Runtime"
          attributes:
          - Name
          computes:
          - type: awk
            script: |
              BEGIN {
                  FS = "@"
              }

              {
                  if (NF == 2 && $1 ~ /^[0-9]+$/) {
                      print $2
                  } else {
                      print ""
                  }
              }

        # Unified source combining all metrics
        unifiedSource:
          type: tableUnion
          tables:
            - "${source::monitors.cassandra.simple.sources.totalHintsSource}"
            - "${source::monitors.cassandra.simple.sources.storageLoadSource}"
            - "${source::monitors.cassandra.simple.sources.readLatencySource}"
            - "${source::monitors.cassandra.simple.sources.writeLatencySource}"
            - "${source::monitors.cassandra.simple.sources.tableBytesFlushedSource}"
            - "${source::monitors.cassandra.simple.sources.pendingCompactionsSource}"
            - "${source::monitors.cassandra.simple.sources.memtableSizeSource}"
            - "${source::monitors.cassandra.simple.sources.keyCacheHitRateSource}"
            - "${source::monitors.cassandra.simple.sources.gcTimeSource}"
            - "${source::monitors.cassandra.simple.sources.readTimeoutsSource}"
            - "${source::monitors.cassandra.simple.sources.writeTimeoutsSource}"
            - "${source::monitors.cassandra.simple.sources.readUnavailableSource}"
            - "${source::monitors.cassandra.simple.sources.writeUnavailableSource}"
            - "${source::monitors.cassandra.simple.sources.uptimeSource}"
            - "${source::monitors.cassandra.simple.sources.nativeConnectionsSource}"
          computes:
            - type: awk
              script: "${file::transpose.awk}"

      mapping:
        source: ${source::unifiedSource}
        attributes:
          id: cassandra
          db.system: cassandra
          db.server.name: ${source::dbServerName}
        metrics:
          # Storage and hints (Cassandra-specific)
          db.server.cassandra.hints: $1
          db.server.storage.size: $2
          
          # Read metrics (using common patterns)
          db.server.operations{db.io.direction="read", db.operation.rate_type="fifteen_minute"}: $3
          db.server.operations{db.io.direction="read", db.operation.rate_type="mean"}: $4
          db.server.operations{db.io.direction="read"}: $5
          
          # Write metrics (using common patterns)
          db.server.operations{db.io.direction="write", db.operation.rate_type="mean"}: $6
          db.server.operations{db.io.direction="write"}: $7
          
          # Storage I/O
          db.server.storage.io{db.io.direction="write"}: $8
          db.server.pending_operations{db.operation.type="compaction"}: $9
          db.server.cache.usage{db.cache.type="memtable"}: $10
          
          # Cache performance
          db.server.cache.hit_ratio{db.cache.type="key_cache"}: $11
          
          # System metrics
          db.server.garbage_collector.time: $12
          
          # Error metrics (using common error patterns)
          db.server.errors{error.type="read_timeout"}: $13
          db.server.errors{error.type="write_timeout"}: $14
          db.server.errors{error.type="read_unavailable"}: $15
          db.server.errors{error.type="write_unavailable"}: $16
          
          # System uptime and connections (common metrics)
          db.server.uptime: $17
          db.server.current_connections{db.connection.type="native"}: $18

  # Additional monitor for cluster-level metrics
  cassandra_cluster:
    simple:
      sources:
        clusterInfoSource:
          type: jmx
          objectName: "org.apache.cassandra.db:type=StorageService"
          attributes:
            - "LiveNodes"
            - "UnreachableNodes"
            - "JoiningNodes"
            - "LeavingNodes"
            - "MovingNodes"
          keyProperties: []
          # We need to calculate the number of nodes in each column
          computes:
            - type: awk
              script: "${file::count_nodes.awk}"

      mapping:
        source: ${source::clusterInfoSource}
        attributes:
          id: cassandra_cluster
          db.system: cassandra
        metrics:
          db.server.cassandra.cluster.nodes{db.node.state="live"}: $1
          db.server.cassandra.cluster.nodes{db.node.state="unreachable"}: $2
          db.server.cassandra.cluster.nodes{db.node.state="joining"}: $3
          db.server.cassandra.cluster.nodes{db.node.state="leaving"}: $4
          db.server.cassandra.cluster.nodes{db.node.state="moving"}: $5