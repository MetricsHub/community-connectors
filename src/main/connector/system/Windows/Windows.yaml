#  _       ___           __
# | |     / (_)___  ____/ /___ _      _______
# | | /| / / / __ \/ __  / __ \ | /| / / ___/
# | |/ |/ / / / / / /_/ / /_/ / |/ |/ (__  )
# |__/|__/_/_/ /_/\__,_/\____/|__/|__/____/
# https://manytools.org/hacker-tools/ascii-banner/ (Slant)

# Implements OpenTelemetry System metrics for Windows OS
extends:
- ../../semconv/System

# Connector properties
connector:
  displayName: Windows System
  platforms: Microsoft Windows
  reliesOn: WMI
  information: Gives OS specific information and metrics
  detection:
    appliesTo:
    - nt
    criteria:
    - type: wmi
      namespace: root\CIMv2
      query: SELECT * FROM Win32_OperatingSystem
    tags: [ system, windows ]

# Monitors for Windows
monitors:

  # CPU metrics
  cpu:
    simple:
      sources:
        processorInformation:
          # cpuId;user;system;idle;
          type: wmi
          namespace: root\CIMv2
          query: SELECT Name,PercentUserTime,PercentPrivilegedTime,PercentIdleTime FROM Win32_PerfRawData_Counters_ProcessorInformation
          computes:
          - type: excludeMatchingLines
            column: 1
            regExp: _Total
          - type: extract
            column: 1
            subSeparators: ","
            subColumn: 2
          # Convert 100ns to s
          - type: divide
            column: 2
            value: 10000000
          - type: divide
            column: 3
            value: 10000000
          - type: divide
            column: 4
            value: 10000000
      mapping:
        source: ${source::processorInformation}
        attributes:
          id: $1
          name: cpu $1
          system.cpu.logical_number: $1
        metrics:
          system.cpu.utilization{system.cpu.state="user"}: rate($2)
          system.cpu.utilization{system.cpu.state="system"}: rate($3)
          system.cpu.utilization{system.cpu.state="idle"}: rate($4)
          system.cpu.time{system.cpu.state="user"}: $2
          system.cpu.time{system.cpu.state="system"}: $3
          system.cpu.time{system.cpu.state="idle"}: $4

  # Memory metrics
  memory:
    simple:
      sources:
        # Free;Free;Cached;Cached
        memoryInformation:
          type: wmi
          namespace: root\CIMv2
          query: SELECT AvailableBytes,AvailableBytes,CacheBytes,CacheBytes FROM Win32_PerfRawData_PerfOS_Memory
        calculatedMemoryInformation:
        # Free;Free%;Cached;Cached%;Used;Used%;Total
          type: wmi
          namespace: root\CIMv2
          query: SELECT TotalVisibleMemorySize FROM Win32_OperatingSystem
          computes:
          # Combining both sources for calculations
          - type: prepend
            column: 1
            value: ${source::memoryInformation}
          # Converting total to bytes and making a copy for used memory
          - type: multiply
            column: 5
            value: 1024
          - type: duplicateColumn
            column: 5
          # Finding used memory and making a copy for utilization
          - type: subtract
            column: 5
            value: $1
          - type: duplicateColumn
            column: 5
          # Calculate utilization by dividing usage by total memory
          - type: divide
            column: 2
            value: $7
          - type: divide
            column: 4
            value: $7
          - type: divide
            column: 6
            value: $7
      mapping:
        source: ${source::calculatedMemoryInformation}
        attributes:
          id: memory_usage
        metrics:
          system.memory.limit: $7
          system.memory.usage{system.memory.state="free"}: $1
          system.memory.usage{system.memory.state="used"}: $5
          system.memory.usage{system.memory.state="cached"}: $3
          system.memory.utilization{system.memory.state="free"}: $2
          system.memory.utilization{system.memory.state="used"}: $6
          system.memory.utilization{system.memory.state="cached"}: $4

  # File system metrics
  file_system:
    simple:
      sources:
        # DeviceID;FreeSpace;FreeUtilization,UsedSpace;UsedUtilization;Size;VolumeName
        fileSystemInformation:
          type: wmi
          namespace: root\CIMv2
          query: SELECT DeviceID,FreeSpace,FreeSpace,Size,Size,VolumeName,FileSystem FROM Win32_LogicalDisk WHERE DriveType = 3
          computes:
          - type: subtract
            column: 4
            value: $2
          - type: duplicateColumn
            column: 4
          - type: divide
            column: 3
            value: $6
          - type: divide
            column: 5
            value: $6
      mapping:
        source: ${source::fileSystemInformation}
        attributes:
          id: $1
          system.device: $1
          system.filesystem.volumeName: $7
          system.filesystem.type: $8
        metrics:
          system.filesystem.usage{system.filesystem.state="free"}: $2
          system.filesystem.usage{system.filesystem.state="used"}: $4
          system.filesystem.utilization{system.filesystem.state="free"}: $3
          system.filesystem.utilization{system.filesystem.state="used"}: $5

  # Pagefile metrics
  paging:
    keys: [system.device]
    simple:
      sources:
        # PageFileName;AllocatedBaseSizeMB;UsedMB
        Win32_PageFileUsage:
          type: wmi
          namespace: root\CIMv2
          query: SELECT Name,AllocatedBaseSize,CurrentUsage FROM Win32_PageFileUsage
          computes:

          # Duplicate AllocatedBaseSize to calculate free space
          # PageFileName;AllocatedBaseSizeMB;AllocatedBaseSizeMB;UsedMB
          - type: duplicateColumn
            column: 2

          # Subtracting current usage from allocated base size to get free space
          # PageFileName;AllocatedBaseSizeMB;FreeMB;UsedMB
          - type: subtract
            column: 3
            value: $4

          # Duplicate Free and Used columns for utilization calculations
          # PageFileName;AllocatedBaseSizeMB;FreeMB;FreeMB;UsedMB;UsedMB
          - type: duplicateColumn
            column: 3
          - type: duplicateColumn
            column: 5

          # Calculate utilization by dividing free and used space by allocated base size
          # PageFileName;AllocatedBaseSizeMB;FreeMB;FreeUtilization;UsedMB;UsedUtilization
          - type: divide
            column: 4
            value: $2
          - type: divide
            column: 6
            value: $2

          # Convert MB values to bytes
          # PageFileName;AllocatedBaseSize;Free;FreeUtilization;Used;UsedUtilization
          - type: multiply
            column: 2
            value: 1048576
          - type: multiply
            column: 3
            value: 1048576
          - type: multiply
            column: 5
            value: 1048576

      mapping:
        source: ${source::Win32_PageFileUsage}
        attributes:
          id: $1
          system.device: $1
        metrics:
          system.paging.usage{system.paging.state="free"}: $3
          system.paging.utilization{system.paging.state="free"}: $4
          system.paging.usage{system.paging.state="used"}: $5
          system.paging.utilization{system.paging.state="used"}: $6

  # Pagefile (swap) activity metrics
  paging_activity:
    simple:
      sources:
        # PagesInput;PagesOutput;totalPageFaults(minor+major),PageReads(major)
        pagingActivity:
          type: wmi
          namespace: root\CIMv2
          query: SELECT PagesInputPersec,PagesOutputPersec,PageFaultsPersec,PageReadsPersec FROM Win32_PerfRawData_PerfOS_Memory
          computes:
          # Subtracting PageReads from totalPageFaults to get minor page faults
          - type: subtract
            column: 3
            value: $4

      mapping:
        source: ${source::pagingActivity}
        attributes:
          id: paging_activity
        metrics:
          system.paging.operations{system.paging.direction="in"}: $1
          system.paging.operations{system.paging.direction="out"}: $2
          system.paging.faults{system.paging.type="minor"}: $3
          system.paging.faults{system.paging.type="major"}: $4

  # Network metrics
  network:
    simple:
      sources:
        # Name;PacketsOutboundDiscarded;PacketsReceivedDiscarded;PacketsSentPersec;PacketsReceivedPersec;PacketsOutboundErrors;PacketsReceivedErrors;BytesSentPerSec;BytesReceivedPerSec;BandwidthBps
        Win32_PerfRawData_Tcpip_NetworkInterface:
          type: wmi
          namespace: root\CIMv2
          query: >
            SELECT Name,
              PacketsOutboundDiscarded,
              PacketsReceivedDiscarded,
              PacketsSentPersec,
              PacketsReceivedPersec,
              PacketsOutboundErrors,
              PacketsReceivedErrors,
              BytesSentPerSec,
              BytesReceivedPerSec,
              CurrentBandwidth
            FROM Win32_PerfRawData_Tcpip_NetworkInterface
          computes:
            # Converting Bandwidth from bits to bytes
            # Name;PacketsOutboundDiscarded;PacketsReceivedDiscarded;PacketsSentPersec;PacketsReceivedPersec;PacketsOutboundErrors;PacketsReceivedErrors;BytesSentPerSec;BytesReceivedPerSec;BandwidthBytes
            - type: divide
              column: 10
              value: 8

      mapping:
        source: ${source::Win32_PerfRawData_Tcpip_NetworkInterface}
        attributes:
          id: $1
          network.interface.name: $1
        metrics:
          system.network.dropped{network.io.direction="transmit"}: $2
          system.network.dropped{network.io.direction="receive"}: $3
          system.network.packets{network.io.direction="transmit"}: $4
          system.network.packets{network.io.direction="receive"}: $5
          system.network.errors{network.io.direction="transmit"}: $6
          system.network.errors{network.io.direction="receive"}: $7
          system.network.io{network.io.direction="transmit"}: $8
          system.network.io{network.io.direction="receive"}: $9
          system.network.bandwidth.limit: $10

  # Physical disk metrics
  physical_disk:
    simple:
      sources:
        # Name;DiskReadBytesPersec;DiskWriteBytesPersec;DiskReadsPersec;DiskWritesPersec;PercentDiskTime;PercentDiskReadTime;PercentDiskWriteTime
        physicalDiskInformation:
          type: wmi
          namespace: root\CIMv2
          query: >
            SELECT Name,
              DiskReadBytesPersec,
              DiskWriteBytesPersec,
              DiskReadsPersec,
              DiskWritesPersec,
              PercentDiskTime,
              PercentDiskReadTime,
              PercentDiskWriteTime,
              Frequency_PerfTime
            FROM Win32_PerfRawData_PerfDisk_PhysicalDisk WHERE NAME != '_Total'
          computes:
          # *DiskTime values in Win32_PerfRawData_PerfDisk_PhysicalDisk are expressed in fraction of seconds
          # Fraction is defined in Frequency_PerfTime
          # We need to divide the values by Frequency_PerfTime to convert to seconds
          - type: divide
            column: 6 # PercentDiskTime
            value: $9 # Frequency_PerfTime
          - type: divide
            column: 7 # PercentDiskReadTime
            value: $9 # Frequency_PerfTime
          - type: divide
            column: 8 # PercentDiskWriteTime
            value: $9 # Frequency_PerfTime
      mapping:
        source: ${source::physicalDiskInformation}
        attributes:
          id: $1
          system.device: $1
        metrics:
          system.disk.io{disk.io.direction="read"}: $2
          system.disk.io{disk.io.direction="write"}: $3
          system.disk.operations{disk.io.direction="read"}: $4
          system.disk.operations{disk.io.direction="write"}: $5
          system.disk.io_time: $6
          system.disk.operation_time{disk.io.direction="read"}: $7
          system.disk.operation_time{disk.io.direction="write"}: $8

  # General system information and uptime
  system:
    simple:
      sources:
        # Uptime
        uptime:
          type: wmi
          namespace: root\CIMv2
          query: SELECT SystemUpTime FROM Win32_PerfFormattedData_PerfOS_System
        # SerialNumber;Caption;Version;BuildNumber
        osInformation:
          type: wmi
          namespace: root\CIMv2
          query: SELECT SerialNumber, Caption, Version, BuildNumber FROM Win32_OperatingSystem
          computes:
          - type: prepend
            column: 5
            value: ${source::uptime}
      mapping:
        source: ${source::osInformation}
        attributes:
          id: $1
          serial_number: $1
          name: $2
          version: $4
          os_version: $3
        metrics:
          system.uptime: $5
